# 一、计算机网络概述

## 1、计算机网络的作用

现如今，我们的生活处处都是网络的影子，我们看的短视屏，我们聊天用的微信，购物用的淘宝等等，这些都是在网络的基础上搭建起来的应用，可以说，没有网络就没有我们如此丰富多彩的幸福生活，所以，我们网络对我们的日常生活的影响是非常巨大的，所以我们非常有必要去学习计算机网络这一门课，知道网络的内部结构和细节，这样我们才能在互联网中更好的生存。



中国互联网网络发展状况报告：www.cnnic.net.cn





## 2、因特网概述

### 2.1 网络、互联网、因特网⚠

#### 概述

-    **网络**：由多个节点和链路连接起来的通信结构，在网络中的每个参与者是节点，节点之间通过链路进行连接，链路分为有线链路和无线链路

    <img src="E:\学习笔记\图片\image-20221128163532341.png" alt="image-20221128163532341" style="zoom:50%;" />

-    **计算机网络**：由主机节点和数据交换节点（中转节点）和通信链路连接而成的网络。

-   **互联网**：多个网络可以通过路由器互联起来，这样就够成一个覆盖范围更大的网络，即为互联网，可以说互联网是==**网络的网络（NetWork of newworks）**==，也就是将多个小网络组合成一个大网络

    <img src="E:\学习笔记\图片\image-20221128163726335.png" alt="image-20221128163726335" style="zoom:50%;" />

-   **因特网(Internet)**：互联网的网络，是世界上最大的互联网

    <img src="E:\学习笔记\图片\image-20221128164236736.png" alt="image-20221128164236736" style="zoom:50%;" />

    注：internet与Internet的区别（i的大小写）

    ​	<img src="E:\学习笔记\图片\image-20221128164456248.png" alt="image-20221128164456248" style="zoom:67%;" />
    
    internet可以是一个局域网，它是由多个网络连接起来的网络，并不是因特网
    
    **服务的角度**：
    
    ​	使用通信设施紧密型通信的分布式应用
    
    ​	为分布式应用提供服务的基础设施

**总结**：就是套娃，一层套一层，可以狭义理解为：网络是家庭网络，互联网是整个中国的网络，因特网是全世界的网络



#### 计算机网络的定义和分类

![image-20221128174909928](E:\学习笔记\图片\image-20221128174909928.png)





### 2.2 互联网的三个阶段

![image-20221128164642563](E:\学习笔记\图片\image-20221128164642563.png)

**因特网服务提供者ISP（Internet Service Provider）**

ISP从电信局中获取到大量成块的IP，然后客户通过缴费的方式接入到互联网

我国的ISP分别有：移不动、没电信、联不通（都很垃圾）



**基于ISP的三层结构的因特网**

<img src="E:\学习笔记\图片\image-20221128165049550.png" alt="image-20221128165049550" style="zoom:80%;" />

上图基础的三层ISP结构，但是只要用户能够接入到ISP，那么他也可以成为一个ISP，将像我们使用手机热点将其他的设备接入到ISP中，从图中可以看出，通信需要经过多个ISP。





### 2.3 因特网的标准化

**RFC文档**：因特网的技术文档，这个文档涵盖了大部分的协议和标准

**制定因特网的正式标准的四个阶段**：起草 -> 建议 -> 草案 -> 标准





### 2.4 因特网的组成⚠

<img src="E:\学习笔记\图片\image-20230109201417904.png" alt="image-20230109201417904" style="zoom: 80%;" />



#### *网络边缘*

由主机和应用程序组成

**应用程序的两种模式**

-   B/C模式（客户端/服务器模式）

    客户端向服务器发送请求，服务器响应请求，但是这会存在一个问题，就是客户端的请求大于服务器端的响应，那么这个时候我们可以通过横向扩容服务器来解决这个问题，但是这个问题又会导致我们的服务器利用率不高，因为在服务器中的某些服务是较少访问的，比如服务器中的下载功能少，服务器的下订单的功能多，那么这个时候就不能很好的提供服务，所以就需要进行服务拆分

-   P2P模式（对等模式）

    节点直接既是服务器又是客户端，可以发送请求和响应请求，我们需要什么服务的时候可以向提供对应服务的服务器发送请求获取我们所需要的数据
    

**支撑应用程序的基础设施**

-   面向连接服务

    典型的例子就是TCP

    -   可靠：首先我们通信前需要建立连接，需要对数据分组进行编号，准备好后再向源端发送数据，发送方接受到数据后发现数据丢失或者数据错误的情况，TCP会重新发送丢失或错误的数据等操作来保证数据的一致性
    -   流量控制：在双方的处理能力不一致的情况下，TCP会进行流量控制
    -   拥塞控制：在传输的过程中可能会有拥塞的情况，接收端需要接收到所有的数据进行组合，TCP会做拥塞控制来防止超时，它会降低发送速度，这样链路的流量强度就不会到1。

-   无连接服务

    典型的例子UDP

    -    不可靠：不需要提前建立连接，直接发送数据包，丢失了也不会重传
    -   没有流量控制：因为它是不用进行重新组合，所有不需要流量控制
    -   没有拥塞控制：它不会有超时的情况，没有接收到就直接不管

    



#### *网络核心*

由路由器和交换机组成，负责传输和数据转发

交换方式：电路交换和分组交换



##### **电路交换**

通过信令系统提前建立双方连接，然后再进行通信，会建立一条独立的线路来进行通信，所以不会有堵塞的情况

-   资源浪费：当双方建立连接，但是没有通信，那么他们会一直占用这条线路，信道利用率不高
-   成本高：用户越多，需要的线路越多
-   维护难：随着用户越来越多，那么线路也会越来越多，那么这个时候维护起来就很困难



**电路交换在网络用的复用**

-   频分(FDM)

    每个用户分配不同的频段使用，比如40-80MHz的A用户，81-120MHz的B用户

    ![image-20230109204612563](E:\学习笔记\图片\image-20230109204612563.png)

-   时分(TDM)

    通过划分不同的时间段来使用，间隔T周期，例如：用户A在第一段，隔着周期T，用户B在第二段

    ![image-20230109204300282](E:\学习笔记\图片\image-20230109204300282.png)

-   波分(WDM)

    划分不同的波段来划分不同的片段

**例题**

![image-20230109205002676](E:\学习笔记\图片\image-20230109205002676.png)





##### **分组交换**

将原始报文分成多段报文，可以称多段报文为多个包，报文的首部可以称为包头，首部记录了目标地址，路由器接收到这段报文需要进行缓存，然后获取到包头的目标地址，然后进行转换到下一个路由器，下一个路由器继续这一步，最后到达目的地，到达目的地后将多段报文还原成原始报文

![image-20230109205413770](E:\学习笔记\图片\image-20230109205413770.png)

*时延*

-   处理延时：路由器需要对分组进行存储，同时还需要做一些数据校验等操作，然后再进行查路由表转发，那么这些时间就是处理时延
-   排队延时：路由器正在处理分组，下一个分组来的时候需要进行排队，等待前面的分组处理完，这个等待时间就是排队延时
-   传输延时：传输不是一下子将分组放出去，而是一个bit一个bit发送出去，那么将分组完全发送出去的时间就是传输延时
-   传播延时：节点到节点之间的传输时间

例子：开车上高速，高速上多台车辆到达服务站等待缴费，那么这个缴费的过程就是处理时延，缴费的同时后面的车辆需要等待，完成缴费车辆就可以行使走了，那么在放行的过程所消耗的时间就是传输延时，车辆从一个收费站到另外一个收费站的时间就是传播延时

![image-20230111205122913](E:\学习笔记\图片\image-20230111205122913.png)



*流量强度*

L：每个分组的长度
a：分组数量
R：链路带宽

流量强度I=aL/R
当流量强度=1的时候，链路带宽达到最大，同时也是最拥塞的，因为它的排队延时达到最大



*丢失*

当队列已经满时，下一个分组来会被路由器直接丢弃

队列的大小不能太大，也不能太小，太大了没意义，因为大就意味容纳的分组多，那么排队时延就会越长，太小容纳的分组少，那么就会导致丢弃的多



*吞吐量*

理论：

![image-20230111205621846](E:\学习笔记\图片\image-20230111205621846.png)

-   Rs：源端到路由器的带宽
-   Rc：路由器到目标端的带宽

当Rs>Rc，吞吐量就是Rc，当Rc>Rs，那么吞吐量就是Rs，谁小，吞吐量就按照谁的来



实际：

路由器是共享的，我们可以能存在N个人，那么一个人所能使用的带宽就是N/1，实际的吞吐量就是N/1带宽，这和输水管道是一样的道理，有一条主干向枝干放水，假设每个枝干是一样的大小，那么每个人的水量就是N/1



**分组交换的方式**

-   数据报网络

    可以通过包头知道目标地址，然后查路由表进行转发

-   虚电路网络

    开始通信前建立虚电路，通过虚电路进行传输转发



##### **电路交换和分组交换的比较**

分组交换在突发性通信的情况下比电路交换支持的人数更多







## 3、接入网和物理载体

### 接入方式

#### modem方式

通过已有的电话线来接入互联网，电话线是用于语音传输，它的带宽非常窄，所以它的承载量有限

我们可以通过下面的方式来实现信号的转换：

-   调频、调相位、综合调制

    通过双方规定相同的规则表示0和1来表示数字信号，但是这种方式不能同时上网和打电话

-   DSL方式

    它将线路分为上行带宽和下行带宽，这样就可以同时上网和打电话



#### 线缆网络



#### 电缆





### 类型

#### 家庭网络

路由器将多个设备接入 -> DSL model -> 互联网



#### 企业网络

无限接入点和无限路由器（AP） -> 多个交换机 -> 路由器 -> 互联网





### **物理载体**

对于不同的物理载体需要使用不同的DSI

#### 引导型

-   双绞线
-   电缆
-   光缆
-   光纤
    -   单模
    -   多模



#### 非引导型

-   蜂窝
-   微波
-   卫星
-   LAN（WIFI）





## 4、性能指标

### 4.1 速率

![image-20221128210754272](E:\学习笔记\图片\image-20221128210754272-16696408758931.png)
$$
速率 = 数据量 / 数据率
$$
**例题**

**例1**：有一个待发送的数据块，大小为100 MB,网卡的发送速率为100 Mbps,则网卡发送完该数据块需要多长时间?

![image-20221128212012259](E:\学习笔记\图片\image-20221128212012259.png)

例2.





### 4.2带宽

![image-20221128212214544](E:\学习笔记\图片\image-20221128212214544.png)



### 4.3 吞吐量

![image-20221128212245632](E:\学习笔记\图片\image-20221128212245632.png)



### 4.4 时延

![image-20221128212415433](E:\学习笔记\图片\image-20221128212415433.png)

网络时延分为三个

-   **发送时延**：源主机将分组发往传输线路，花费的时间就是发送时延
    $$
    发送时延 = 分组长度  / 发送速率
    $$

-   **传播时延**：路由器对分组进行存储转发的时间
    $$
    传播时延 = 信道长度 / 电磁波传播速率
    $$

-   **处理时延**（一般忽略不计，因为很多影响因素）

**问题**：在处理时延忽略不计的情况下发送时延和传播时延谁占主导？

**例1**：数据块长度为100 MB，信道带宽为1 Mb/s,传送距离为1000 km，计算`发送时延`和`传播时延`。

<img src="E:\学习笔记\图片\image-20221128214314496.png" alt="image-20221128214314496" style="zoom:60%;" />

发送时延占主导

**例2**：数据块长度为1 B,信道带宽为1 Mb/s,传送距离为1000 km,计算发送时延和传播时延。

![image-20221128214327507](E:\学习笔记\图片\image-20221128214327507.png)

传播时延占主导



### 4.5 时延带宽积

![image-20221128214434772](E:\学习笔记\图片\image-20221128214434772.png)



### 4.6 往返时间

![image-20221128214455327](E:\学习笔记\图片\image-20221128214455327.png)



### 4.7 利用率

![image-20221128214538340](E:\学习笔记\图片\image-20221128214538340.png)



### 4.8 丢包率

![image-20221128214603631](E:\学习笔记\图片\image-20221128214603631.png)





## 5、计算机网络的结构体系

### 5.1 常见的网络体系结构

![image-20221128214736030](E:\学习笔记\图片\image-20221128214736030.png)

我们学习使用的是原理体系结构

注：路由器的实际结构有两层 - 网际层、网络接口层，原理体系结构有三层 - 网络层、数据链路层、物理层





### 5.2 分层 

计算机网络是个非常复杂的系统，分层是为了分而治之，不同的层解决不同的问题

不同层次互不影响，当一个层次进行技术的更新迭代，对于上下层是不影响的，该如何还是如何

![image-20221128220147637](E:\学习笔记\图片\image-20221128220147637.png)



#### ①物理层

1.  传输的介质问题，使用什么介质进行传播
2.  采用什么样的物理接口
3.  怎样将数字信号转换为电子信号



#### ②数据链路层

1.  主机编制问题，例如MAC地址
2.  从信号所表示的比特流中区分出地址和数据，解决分组封装格式问题
3.  协调个主机争用总线问题



#### ③网络层

1.  网络和主机共同编制问题
2.  路由器如何转发分组，如何进行路由选择



#### ④运输层

1.  解决进程之间基于网络的通信问题

    报文应该交给那个进程的应用进行处理

2.  可以提供可靠的服务，解决应用层带来的不可靠问题



#### ⑤应用层

1.  通过应用进程间的交换来完成特定的网络应用



### 5.3 分层思想举例

![image-20221128232007746](E:\学习笔记\图片\image-20221128232007746.png)

说明：

**浏览器发送请求**

1.  应用层的报文是http报文
2.  运输层中将tcp协议数据加入进去
3.  网络层将IP协议的数据加入进去
4.  数据链路层放入两个帧，前面是`ETH`帧，后面是`FCS`帧
5.  物理层添加前导码，然后转换成信号传输给路由

**路由器转发**

路由器只有三层，主要是负责解析到目标地址然后进行转发

1.  物理层将比特流转换为数据
2.  将帧给去掉
3.  获取目标IP进行转发

**交换机**

交换机只有两层，链路层和物理层，主要负责数据的传输

**服务器接收请求**

从物理层逐层获取层次需要的数据，到最后应用层就是获取http报文，通过这个http报文来返回客户端需要的资源





### 5.4 专业术语

来源OSI七层结构，所有体系结构都可以用



#### ①实体

**实体**：任何可以发送或接受信息的`硬件`或`软件进程`

**对等实体**：收发双发相同层级中的实体

![image-20221128220611277](E:\学习笔记\图片\image-20221128220611277.png)



#### ②协议

控制两个对等实体进行逻辑通信的规则的集合，就是双方指定好的规则

![image-20221128220759823](E:\学习笔记\图片\image-20221128220759823-16696444812933.png)

协议三要素

-   语法：定义交换信息的格式，对应的字段是什么功能

    比如http协议中，服务器端要客户端缓存静态资源，那么我们只需要在对应的字段上编写对应的功能字段即可

-   语义：定义双方所要完成的操作

    比如缓存功能就是缓存字段所带有的功能

-   同步：定义双方的时序关系

    比如：TCP建立连接



#### ③服务

![image-20221128221232840](E:\学习笔记\图片\image-20221128221232840.png)

简单来说，当前层次可以对上一层提供服务，上一层是基于下一层服务进行的协议



**服务访问点(SAP)**：在同一系统中相邻的实体交换信息的逻辑接口，用于区分不同的服务类型

自我理解：不同层次之间获取信息的标记。比如TCP的服务访问点就是`Socket`

-   数据链路层的服务访问点为帧的“类型”字段
-   网络层的服务访问点为IP数据报首部中的“协议字段”
-   运输层的服务访问点的“端口号”

举个例子：我们去客运站可以乘车、寄东西、挂失，客运站有不同的窗口处理不同的业务，我们要乘车，那么我们就去乘车服务窗口，然后购票员给我们出票，但是她不负责开车将我们运到指定地方，这个就是服务访问点，只负责告知，不负责实现。

**服务提供者**：上面说了服务访问点值负责服务，不负责实现，那么真正实现的就是服务提供者它来实现，那么用户怎么知道它提供那些服务呢这个时候就需要服务原语来告诉用户它有那些功能

**服务原语**：上层使用下层所提供的服务必须通过于下层交换一些命令，这些命令层为服务原语





#### ④数据单元

-   服务数据单元SDU：层与层交换的数据包
-   协议数据单元PDU：协议之间的数据
    -   应用层：报文(message)
    -   运输层：报文段(segment)，TCP段，UDP数据报
    -   网络层：分组Packet（无连接方式：数据报datagram）
    -   链路层：帧(frame)
    -   物理层：位(bit)

![](E:\学习笔记\图片\image-20221128221817861.png)









# 二、应用层

本章学习应用层原理和实现，应用程序采用的交互模式、客户如何寻找服务器、传输层提供了什么服务、应用层有那些主流协议、有哪些主流应用



## 2.1 网络应用原理

研发网络应用程序的核心是写出能够运行再不同的端系统和通过网络彼此通信的程序。简单点来说就是程序可以在不同端系统中运行，应用之间可以通过网络进行信息交流。懂得网络应用原理可以有助与我们写出优秀的应用程序。

市面上比较火的应用程序：Youtube、google搜索引擎、淘宝、京东、微信等等。



### 2.1.1 应用体系结构

#### ①`B/C`模式

`B/C`模式就是`客户-服务器`模式，客户向服务器发送请求，服务器响应客户的请求，发送方为客户，接收并响应为就是服务器，服务器作为被动者，也就意味这它是一直运行着的，这样客户才能无时无刻访问它。

例如：web应用，在浏览器中输入连接就可以访问到形形色色的网站，浏览器就是客户，请求的url所在的主机就是服务器

![image-20230114204518759](E:\学习笔记\图片\image-20230114204518759.png)

**弊端**：

-   数据是在服务器上的，一旦挂掉，那么客户就访问不到服务器了
-   用户请求量大会导致服务器的处理能力下载，也就会导致用户体验不友好

**好处**：方便管理，数据实在服务器上的，所以只需要管理服务器就好了



#### ②P2P模式

P2P模式既是客户又是服务器，当它向其他服务器请求时，那么它就是客户，当它接收并响应其他客户请求时，它就是服务器，所以客户和服务器的身份时相对的。P2P中的主机我们说他们时对等体

![image-20230114204443603](E:\学习笔记\图片\image-20230114204443603.png)

**弊端**：

-   数据不好统一管理，因为数据在不同的主机上
-   安全性不好控制

**好处**：方便扩展，用户群体越大，资源就越多



#### ③混合模式

`B/C`模式和`P2P`模式两者一起使用

**例子**：Naster，由一个大学生开发的音乐分发平台

![image-20230114205249147](E:\学习笔记\图片\image-20230114205249147.png)

**实现步骤**：

1.  客户端向服务器端注册，将所拥有的音乐和自己的地址告诉服务器
2.  向服务器发送查询音乐请求，服务器响应返回有这个资源的主机地址
3.  客户端向资源主机发送获取资源的请求，目标主机响应返回资源

整个过程中，查询音乐使用的时`B/C模式`，主机间响应和请求是`P2P`模式





### 2.1.2 应用之间通信问题

应用间需要通信，首先我们得知道目标主机在哪，还得知道要访问的应用在什么端口上，接下来就是进行数据的传输，层与层之间是相互不影响的，所以我们只需要关心传输层给应用层提供了什么服务，我们需要使用传输层的什么服务即可



#### ①寻址

要发送一封邮件，首先我们得知道接收邮件的邮局在哪，在计算机中也是这样的，要访问目标主机的应用，我们首先要知道目标主机在哪，主机在网络中的唯一表示是IP，通过它我们就可以进行主机间的通信，主机是找到了，但是主机上有很多的应用在运行，那么我们怎么才能知道那个应用才是我们访问的呢？答案是通过端口号进行访问，操作系统会给运行的应用一个标识，这个标识就是端口号，通过这个端口号我们就可以访问这个应用程序。



#### ②传输层的访问接口 - Socket

地址和端口号我们都找到了，那么怎么获取我们交互的数据呢，我们是分层的结构，应用是率属于应用层的，应用层需要使用下层所提供的服务，也就是需要通过层间接口访问传输层所提供服务，这个层间接口就是套接字(Socket)，由它来打通应用进程和传输层的通信。

![image-20230114212129104](E:\学习笔记\图片\image-20230114212129104.png)

socket由操作系统来提供，所以它也可以叫做`应用编程接口(Application Programming Interface API)`，它记录了 本机地址、本机端口号，目标IP，目标端口号，我们称他们为4元组，由于网络间的通信可能会很频繁，每次都在表头记录这些控制信息不利于信息的传输，所以通过socket来将他们的关系映射成表，需要就查表即可。

<img src="E:\学习笔记\图片\image-20230114211927678.png" alt="image-20230114211927678" style="zoom:50%;" />



#### ③传输层提供的服务

那么传输层对于应用层提供什么服务呢?

1.  可靠的数据传输：提供保证数据交付服务
2.  吞吐量：运输协议能够以某种特定的速率提供确保的可用吞吐量
3.  定时：能够提供定时保证
4.  安全性：能够为应用程序提供一种或多种安全性服务



#### ④因特网提供的服务

**TCP服务**

-   面向连接的服务：通信前需要建立连接
-   可靠的数据传输服务：数据不丢失、不重复、不失序、不出错，保证发送前和接收后一致
-   流量控制：当接收方处理不过来时进行流量控制，减慢输出
-   拥塞控制：当线路中出现拥塞，TCP会抑制发送
-   安全性：TCP中是使用明文进行传输的，所以会有安全性的隐患，为了安全性，可以使用TCP的增强版TCL，它提供算法加密、数据完整性校验和端点鉴别服务



**UDP服务**

-   不面向连接的服务
-   不提供可靠的数据传输服务
-   不提供流量控制
-   不提供拥塞控制

Q：为什么需要UDP呢？

有些应用是需要实时传输，对于数据安全不敏感，就需要使用UDP，比如打游戏，如果在传输的过程中出现丢包，然后TCP进行重传，这需要时间，那么对于用户来说是非常不友好的，所以TCP不适合这种场景。而UDP则没有这个问题，它就是直接发，没接收到也无所谓，丢了一帧对整体影响不大。



**不能提供的服务**

1.  定时
2.  吞吐量

这两个服务在实际的运行中会有很多的问题，不确定因素很多，所以不能保证。



### 2.1.3 应用层的协议

应用层协议定义了运行在不同端系统中的应用程序进程如何相互传递报文

定义的内容：

-   交换的报文类型
-   各种报文类型的语法
-   字段的语义
-   确定一个进程何时以及如何发送报文，对报文进行响应规则





## 2.2 典型的协议及其应用

### 2.2.1 Web和HTTP

#### ①web和url

Web页面由一些对象组成，对象可以是html、图片、视屏、css、javaScript等文件，基础html文件（basic html）通过url来标记对象，客户端在解析html文件时获取标记的url，对`url`所在的服务器发起请求，服务器响应对象回来，有客户端进行解析渲染到页面上。

`url`叫资源定位符，通过它来找到服务器上所在的文件，组成格式如下：

`协议://主机名:端口号/资源位置`

80端口是web应用的默认端口号。我们访问web应用一般是`http://www.baidu.com/资源路径`这样访问，它会默认带上端口号



#### ②html概述

html名为超文本传输协议，通过`url`来访问对象，对象之间又可以进行访问，例如在网页中的`链接标签`，点击它可以跳转到其他的web页面，这样形成不同的交互，所以说是超文本传输协议。

它是应用层的协议，规定了web客户端向web服务器端请求的方式，以及web服务器端响应客户端web页面的方式

<img src="E:\学习笔记\图片\image-20230118174220878.png" alt="image-20230118174220878" style="zoom: 67%;" />

html是建立在**传输协议TCP协议之上的协议**，由于TCP提供的可靠的传输服务，也使得html的数据安全得到保障，一切由TCP来保证。

**html是一个无状态的协议**，它不会记录下任何的访问信息和客户端信息，每一次请求都是新的请求，就算是同一次访问的客户端它也不会察觉出来，它就当你是一个新的请求，所以它是无状态的协议，在后面我们学习cookie机制就可以弥补这一缺陷。



#### ③连接方式

html不同的版本连接方式也不一样，http1.0采用的是非持续连接，http1.1采用的是持续连接，这两种连接方式有很大的不同，接下来我们一一讲解

首先我们要知道接收和响应报文需要哪些步骤

![image-20230118192852906](E:\学习笔记\图片\image-20230118192852906.png)

第一步是要经历TCP的三次握手

1.  客户端向服务器端发送小TCP报文段
2.  服务器用一个小TCP报文段做出确认和响应
3.  最后，客户端向服务器返回确认

第二步是传输html文件，经过这四个步骤，我们可以说他们经历了两个`RTT`和`传输html文件`的时间

**RTT**：全名是Round-Trip Time，意思是往返时间



**非持续连接**

在接收完对象后就关闭TCP连接，下一个对象就又执行TCP握手和文件传输，如果有10个对象需要请求，那么所需要的时间就是10x(两个RTT+文件传输时间)，所以这对于客户和服务器来说都是不太友好的，客户的响应速度会变慢，服务器所需要维护的TCP连接数更多，会导致服务器的处理能力下降。



**非持续连接**

使用一个TCP连接，请求该服务器相同的对象时就不用频繁的关闭和建立连接，不像非持续连接每次请求完毕就关闭连接，减少了RTT，对象传输可以并发请求，不用等待一个对象完毕之后再去请求另外的对象。通常，一个连接长时间不使用的话就会关闭连接。





#### ④报文格式

HTTP报文有两种：请求报文和响应报文

报文是由`ASCLL`码编写的，相比于二进制文件更直观，方便开放人员调试，抓包直接就可以清楚报文意思，不用对文件进行编译处理

**请求方法**：GET、POST、HEAD、PUT、DELETE

-   GET请求时获取资源
-   POST请求一般用于表单提交、提交大数据的场景
-   HEAD请求和响应都只有请求头，没有响应数据
-   PUT请求用于数据的更新或上传数据
-   DELETE请求时删除某个数据



**1.请求报文**

<img src="E:\学习笔记\图片\image-20230119185650028.png" alt="image-20230119185650028" style="zoom:67%;" />

-   请求行：请求方法 路径 http版本号

-   首部行：一些功能的字段，kv键值对的形式，`key:value`

    | key             | key表示的意思                                           |
    | --------------- | ------------------------------------------------------- |
    | Host            | 主机名                                                  |
    | User-agent      | 用户使用的代理客户端                                    |
    | Connection      | TCP连接方式，close表示非持续连接，keep-live表示持续连接 |
    | Accept-language | 支持的语言                                              |

-   请求体：如果是Post请求的话，可以在请求体中携带请求的数据



**2.响应报文**

<img src="E:\学习笔记\图片\image-20230119190625557.png" alt="image-20230119190625557" style="zoom:67%;" />

-   响应头

    -   状态行：http版本 状态码 状态信息

        常见状态码和对应的状态信息

        | 状态码 状态信息                | 表示                                                         |
        | ------------------------------ | ------------------------------------------------------------ |
        | 200 OK                         | 请求成功                                                     |
        | 301 Moved Permanently          | 请求的对象已经被永久转移了，新的URL定于izai响应报文的"Location:"首部行中。客户端软件将会自动获取新的URL |
        | 400 Bad Request                | 该请求服务器不能理解                                         |
        | 404 Not Found                  | 请求的对象不在服务器上                                       |
        | 505 HTTP Version Not Supported | 服务器不支持请求报文的HTTP版本                               |

        

    -   首部行

        | key            | key表示的意思                |
        | -------------- | ---------------------------- |
        | Date           | 响应时间                     |
        | Server         | 服务器的版本号和端系统的型号 |
        | Last-Modified  | 最后更新的时间               |
        | Content-Length | 响应体的内容长度             |
        | Content-Type   | 响应回来的对象类型           |

-   响应体：对象实体

还有很多的报文字段，这个需要自己查阅资料



#### ⑤Cookie

我们知道http时一个无状态的协议，那么为了弥补这一缺陷，http的设计这增加了cookie机制。那么它是怎么让http变成有状态的呢？

首先我们看一下它的运作流程：

![image-20230119191752314](E:\学习笔记\图片\image-20230119191752314.png)

①客户端请求服务器，服务器响应数据并通过`set-cookie字段`设置cookie，服务器端维护一份cookie

②客户端保存服务器传过来的cookie

③接下来的每一次请求在请求头中增加`cookie`字段，并将保存在本地的cookie作为值

④服务器进行cookie对比，对比正确，那么服务器就知道你是上一次请求的客户端，这样就可以继续你们的会话了

通过cookie机制将http变成是有状态的，这样在每次访问的时候它可以通过cookie携带上某些信息，以此来延续上次的会话



**隐私和安全**

由于cookie的机制使得你每次访问了什么网站或者点击了什么按钮服务器都是可以知道的，所以一些购物网站它就可以通过这些信息给你推送你喜欢的商品，但是这对于你的隐私确实没有任何的保障，因为服务器管理方可能会将你的信息卖给第三方

cookie存在安全隐患，一些坏家伙仿造cookie来访问服务器，然后对你的账户进行操作，将一些重要的数据获取。用术语表示它就是`CSRF 跨站点请求伪造攻击`



#### ⑥web缓存

web缓存器也叫代理服务器，它可以代替初始web服务器来响应http请求。Web缓存服务器有自己的磁盘空间，它可以保存最近访问过的请求副本，给浏览器客户端设置代理，那么下一次请求就会先请求代理服务器，如果代理服务器没有对应副本，那么它就会向真正的服务器发起请求。

<img src="E:\学习笔记\图片\image-20230119195304337.png" alt="image-20230119195304337" style="zoom: 80%;" />

使用它的好处：

①可以大大减少客户请求的响应时间，我们的大部分请求可以直接访问代理服务器，一小部分请求去访问真是服务器。一般的代理服务器离我们都是比较近的，所以它能大大缩短响应时间

②它能够大大减少一个机构的接入链路到因特网的通信量，因为许多的请求在局域网中处理了。

③它的成本低，使用扩大带宽的方式减少响应时间的话它的费用高，而且每一个月或者每年都要交费，而代理服务器所需要的配置不高，只需要花费少来的价钱来购买PC主机即可。



**版本管理**

使用web缓存的话也会有问题，版本一致性的问题，当服务器的文件已经更新，而本地的web缓存器没有更新的话，那这个就是一致性问题，幸运的是http中有一种机制，它允许缓存器证实它的对象是最新的，这种机制就是条件GET。

条件GET：web缓存器在请求行中包含`If-modified-since`首部行，服务器上的对象如果没有发生变化的话就会发送只有一个响应头的报文，并且状态码信息是`304 Not Modified`，如果已经发生改变，那么它的状态码就是200，并且在响应体携带对象数据

![image-20230119195415175](E:\学习笔记\图片\image-20230119195415175.png)





#### ⑦HTTP2和HTTP3

**HTTP2成帧率**

用于HOL阻塞的HTTP2解决方案是将每个报文分成小帧，并且在相同TCP连接上交错发送请求和响应的报文、

比如有1个大对象和9个小对象，假设大对象由1000帧组成，小对象由2帧组成。HTPP2的交错发送技术就是先将大对象的第一帧发出去，然后是9个小对象的第一帧，然后是第二帧，以此类推，当到达20帧的时候，小对象已经发送完毕了，如果不采用交错发送，那么小对象到达的时间为1018帧，那么用户等待的时间就很长。因此HTTP2的成帧技术能够极大的减少用户的感知时延。

![image-20230119201158245](E:\学习笔记\图片\image-20230119201158245.png)



**响应报文的优先次序和服务器推**

还是上一个例子，9个小对象和1个对象，采用的时HTTP的交错发送，那么谁发送第一也就意味着更快的到达，那么发送的优先顺序就很重要了，将重要的对象放在前面，这样的话就可以更快的显示出来。报文优先次序允许开发者根据用户要求安排请求的相对优先权，从而更好的优化应用的性能，方法是为每个报文分配1到256之间的权重，较大的数字表明较高的优先权。通过这些权重，服务器能够为具有最高优先权的响应发送第一帧。

HTTP2的另一个特征是允许服务器为一个客户请求而发送多个请求，服务器会分析HTML页面，从而分析出还需要什么对象，然后服务器就会直接推送这些对象给客户端，从而减少客户端请求的额外时延。



**HTTP3**

HTTP3时在QUIC之上运行的，而QUIC是一种新型的协议，它使用UDP协议作为传输协议。QUIC具有几个能够满足HTTP的特征，例如报文复用(交错)、每流流控和低时延连接创建。





### 2.2.2 电子邮件

电子邮件，顾名思义就是在网络中发送和接收邮件，相比于传统的邮件服务，电子邮件更加方便，功能也更强大，包括添加附件、超链接、HTML格式文本和图片。等待的时间也很短，一般是分钟内就可以收到别人发的邮件，而不用等待邮局来运输和派发，总之，电子邮件在现代是非常流行的应用。



#### 电子邮件的组成部分

1.  客户代理

    客户代理也就是我们用来接收和编辑邮件的软件或，通过它发送给邮件服务器。比如我们常用的QQ邮箱、163邮箱

2.  邮件服务器

    邮件服务器负责将邮件发送给目标邮件服务器

3.  邮件传输协议

    邮件传输之间所需要的遵守的协议。比较典型的邮件传输协议是`STMP`

那么这些组成部分是如何运作的呢？

<img src="E:\学习笔记\图片\image-20230120182712045.png" alt="image-20230120182712045"  />

1.  用户在用户代理软件上编辑好邮件
2.  用户代理将编辑好的软件通过`SMTP协议`发送给接收用户邮件的邮件客户端
3.  邮件客户端通过`SMTP协议`将报文传输给目标用户的邮件服务器
4.  目标用户使用用户代理软件获取放在邮件服务器队列中的邮件
5.  对于不同的协议，用户可以有不同的操作

邮件服务器既是客户端又是服务器端，对于发的就是客户端，接收的就是服务器端。



#### SMTP

SMTP是因特网电子邮件中主要的应用协议。它使用TCP可靠数据传输服务。每台邮件服务器既可以运行SMTP的客户端又可以运行SMTP的服务器端。SMTP用于从发送方的邮件服务器发送报文到接收方的邮件服务器。

之前的SMTP，它限制所有邮件报文的体部分只能采用简单的7比特ASCLL表示。但是在如今因特网如此发达的场景下显然是不行的。

STMP的操作步骤

![image-20230120184024851](E:\学习笔记\图片\image-20230120184024851.png)

1.  A用户调用它的邮件代理程序并提供B用户的邮箱地址，然后指示用户代理发送该报文
2.  A用户代理把报文发送到她的邮箱服务器上，在邮箱服务器的队列中存储
3.  A用户的邮箱服务器发现了队列中的这个报文，STMP客户端发起一个到B用户的TCP连接
4.  经过一些列SMTP握手后，SMTP客户端将报文通过TCP发给B用户的邮件服务器
5.  B用户的SMTP服务器接收到了A的报文，将它放入到了B用户的邮箱中
6.  B用户通过用户代理程序拉取邮件

SMTP的特点：

-   不使用中间邮件服务器发送邮件。即直接和目标邮件服务器建立TCP连接，不管目标主机距离多远。如果目标主机没有开机，它会将报文保存下来并等待进行新的尝试
-   如果多个报文的目标主机相同，那么它会在一条TCP连接上进行传输，不会再重新建立一条TCP连接
-   默认端口是25号端口

STMP如何建立TCP连接的？

通过报文的形式建立连接，报文是ASCLL码文本，他们之间的交互像是人与人对话一般

<img src="E:\学习笔记\图片\image-20230120185357962.png" alt="image-20230120185357962" style="zoom:80%;" />

`S`表示SMTP服务器端，`C`表示SMTP客户端

-   HELO是hello的简写
-   250表示接收成功
-   MAIL FROM、PCPT TO、DATA、QUIT分别表示邮件来自谁、发给谁、邮件内容、退出。



#### 邮件报文格式

<img src="E:\学习笔记\图片\image-20230120185743739.png" alt="image-20230120185743739" style="zoom:80%;" />

首部行和主题用空行分割，这和http很像

报文格式：多媒体扩展

以前的邮件只能发文字，对于以前的邮件协议打上补丁，在报文首部申明额外的字段表示不同的媒体类型。

<img src="E:\学习笔记\图片\image-20230120185852816.png" alt="image-20230120185852816" style="zoom:80%;" />





#### 邮件拉取协议

邮件到了目标用户时，目标用户怎么去获取邮件呢，直接让存有目标用户邮件的邮件服务器通过SMTP客户端推送过去吗，那么目标用户得在本地有一台服务器，而且得时刻开着，这对于用户来说是不现实的，不仅耗电，安全也得不到保障。

既然邮件服务器不能推送邮件，那么我们可以直接拉取服务器邮件上的邮件吗，是的，我们使用用户代理就可以实现这个功能，通过拉取协议来将邮件信息拉取到用户代理中，用户通过用户代理来操作邮件。

<img src="E:\学习笔记\图片\image-20230120190054124.png" alt="image-20230120190054124" style="zoom:80%;" />

典型的拉取协议代表有POP3、IMAP(Internet Mail Access Protocol)、HTTP。

-   POP3

    可以用于用户身份确认 (代理<-->服务器) 并下载，但是不能对文件进行删除或更改等操作。也就是说只能看，不能动

    <img src="E:\学习笔记\图片\image-20230120191139279.png" alt="image-20230120191139279" style="zoom:80%;" />

    这里的删除可不是用户操作，而是使用POP3协议的用户代理会将邮件服务器的邮件下载到本地并删除服务器端的邮件，对应的也有“下载并保留”模式，它不会删除邮件服务器上的邮件

-   IMAP

    它有更多的特性,可以远程管理文件夹，比如删除文件、更改文件、移动文件等。

-   HTML

    它比较方便使用





### 2.2.3 DNS

源主机要发送数据包给目标主机，需要通过IP地址进行寻址，IP地址是由4位字节组成，它呈现的形式不好给人类记忆，人们对名字记忆更好，比如一个IP为`110.234.531.321`和`www.xiaozhi.com`那个更好，很明显，域名比IP更好记忆。那么从域名到IP需要进行转换，`DNS（Domain Name System）域名解析系统`就是来负责将域名解析为IP地址，源主机通过IP地址访问目标主机

<img src="E:\学习笔记\图片\image-20230126162605386.png" alt="image-20230126162605386" style="zoom:80%;" />





#### ①命名

域名的命名方式是`名字 + 后缀`，如：`www.baidu.com`，通过名字和后缀来区分不同的域名，保证域名唯一性

域名等级划分：

![image-20230126172448772](E:\学习笔记\图片\image-20230126172448772.png)

如图有多级域名，一级域名下有二级域名，二级域名有三级域名，依次往下类推N级域名

举个例子：`www.xiaozhi.com`是一级域名，`www.xiaozhi.aa.com`是二级域名，`www.xiaozhi.aa.bb.com`是三级域名，以此类推

这样命名的好处是方便管理，比如你有多个子项目，那么就可以用二级或者三级域名来命名，方便管理。

**主机别名**：主机可以有一个或多个别名，比如`www.xiaozhi.com`和`www.xiaozhi.test.com`，`www.xiaozhi.com`是主机别名，`www.xiaozhi.test.com`是规范别名。

**邮件服务器别名**：电子邮箱程序可以调用DNS，对提供的主机别名进行解析，已获得该主机的规范主机名及其IP地址。





#### ②DNS的解析原理

既然是负责解析域名的系统，它所要覆盖的范围肯定是全世界的，因为我们是因特网，所以会跨越国与国之间进行访问。那么它的设计就会变得尤为重要。

假设它是单体设计，单体就是将系统部署在一台服务器上，全世界需要解析的服务都访问这一台服务器，这种设计不适合当今的因特网。想象一下，全世界的人来访问，它的流量会非常大，需要处理的请求也会非常庞大，因此它的处理速度会变的非常慢，如果因为这个原因导致访问的网站变慢，那么这对于客户是非常痛苦的。除了处理速度，也要考虑它的可扩展性，域名它可能删除和修改，那么频繁的操作，也不是一台服务器能够扛下来的。当这一台服务器宕机，那么全世界的域名解析服务就出现问题，所以这种方案是不可取的。

域名解析的设计者使用的是分布式系统方案。不将所有的域名都放在一个服务器上，而是分布放置，即使某一个服务器挂了，也不会对很多的服务造成影响



***分布式、层次数据库***

分布式存储，全世界的IP分布在不同的服务器上，并不是全部在一台及其上，即使有一台服务器宕机，对于其他的服务还是可以正常运行的。采用分布式架构它的扩展性更好。它采用下面的树状层次结构将各类服务器组织起来。

![image-20230126163622449](E:\学习笔记\图片\image-20230126163622449.png)

-   **根DNS服务器**：由超过100台根服务器实体遍及全世界。这些根服务器是13个不同服务器的副本，由12个不同组织管理。根名字服务器提供TLD服务器的IP地址。
-   **顶级域(TLD)DNS服务器**：顶级域名(com、edu、org、net、gov.......)和国家顶级域(cn、uk、fr、jp......)。TLD服务器提供权威服务器的IP地址。
-   **权威DNS服务器**：记录因特网上注册的域名映射记录。由它来将域名解析成IP地址

他们的关系就是一层层的往下走，得到TLD服务器的IP地址，TLD服务器返回权威DNS服务器的地址，权威服务器下还有权威服务器，所以是树状结构，层层往下解析，所以在记录这些DNS记录的时候需要标注解析的类型，这样方便管理和扩展。

想象一下，我自己也想搞一台DNS服务器来解析我自己的子域名。比如`www.xiaozhi.com`是主域名，我的子域名是`www.xiaozhi.aa.com`，那么我可以在权威服务器中将我的DNS服务器的IP地址进行记录，类型标记为DNS服务器，这样我就可以很轻松的管理我多个业务下的子业务了。通过这个例子可以看得出来它的扩展性非常好。

除了前面的三种类型的服务器，还有一种是`本地DNS服务器`，每一个ISP都由一台本地DNS服务器。我们会先访问本地DNS服务器，由本地DNS服务器接入到DNS服务器层次结构中。

<img src="E:\学习笔记\图片\image-20230126170108284.png" alt="image-20230126170108284" style="zoom:80%;" />

它的解析过程如上图所示，首先是经过`本地DNS服务器`，如果本地没有缓存则会去发送请求给`根DNS服务器`，`根DNS服务器`返回`TLD DNS服务器`的地址，`本地DNS服务器`再去访问`TLD DNS服务器`,`TLD DNS服务器`返回有这个主机名的`权威DNS服务器`,`本地DNS服务器`再请求访问`权威DNS服务器`，最后得到主机的IP地址，最终返回给主机，然后主机向目标主机发起请求。

上面的例子利用了迭代查询，还有一种查询时递归查询，如下：

<img src="E:\学习笔记\图片\image-20230126171101695.png" alt="image-20230126171101695" style="zoom:80%;" />

逐级往下查询，直到查询在逐级返回。



***DNS记录和报文***

共同实现DNS分布式数据库的所有DNS服务器存储了**资源记录**（Resource Record，RR），RR提供主机名和IP的映射。

资源记录包括下面的4元组：

```
(Name , Value, Class, Type, TTL)
```

-   Name：域名

-   Value：IP地址

-   Class：在因特网没有普及的时候有很多的类型的网络，历史遗留的字段，IN表示因特网

-   Type：解析的类型

    | Type  | 解析类型                           |
    | ----- | ---------------------------------- |
    | A     | 映射到真正提供服务的服务器的IP地址 |
    | NS    | 提供到权威服务器的IP地址           |
    | CNAME | 提供一个主机名的规范主机名         |
    | MX    | 提供邮件服务器的规范主机名         |

-   TTL：生存时间，记录了删除缓存的时间

<img src="E:\学习笔记\图片\image-20230126181052649.png" alt="image-20230126181052649" style="zoom:80%;" />



**DNS报文**

![image-20230126181500622](E:\学习笔记\图片\image-20230126181500622.png)

| 字段                                | 作用                                      |
| ----------------------------------- | ----------------------------------------- |
| identification                      | 标识符，是一个16位bit的数，用于表示该查询 |
| flags                               | 标志位，查询报文（0）   回答报文（1）     |
| questions                           | 问题数                                    |
| answer RRs                          | 回答RR数                                  |
| authority RRs                       | 权威RR数                                  |
| additional RRs                      | 附加RR数                                  |
| questions (variable # of questions) | 一个查询的Name, type字段                  |
| answers (variable # of RRs)         | 对应查询的RR记录                          |
| authority (variable # of RRs)       | 权威服务器的记录                          |
| additional info (variable # of RRs) | 附加的有用的信息                          |





***DNS缓存***

为了提高访问效率，DNS服务器使用了缓存，通过TTL字段来设置缓存的过期时间。一般是2天，一旦超过过两天没有被访问，就会删除记录



#### ⑤DNS维护

DNS的记录是怎么增加到分布式数据库中的呢？

是由注册登记机构来将注册的域名输入到DNS数据库中，对提供的服务收取少量的费用。

因特网名字和地址分配机构（Internet Corporation for Assigned Names and Numbers, ICANN）向各种注册登记机构授权。

国内比较知名的注册登记机构有阿里云、腾讯云等......。

示例：阿里云中购买一个域名，然后到域名控制台中进行设置

![image-20230126183550812](E:\学习笔记\图片\image-20230126183550812.png)

-   记录类型：就是我们之前说的`Type`字段
-   主机记录：填写域名前缀，比如`www`、`www.aa`
-   解析来源：映射主机所在的网络运营商
-   记录值：IP或者域名，根据你选择的类型填写
-   TTL：生存时间



### 2.2.4 FTP

文件传输协议，默认端口是21。首先有一个FTP的文件服务器一直开启等待请求。客户端需要携带口令信息访问服务器，口令信息也就是我们的用户验证信息。使用的是TCP建立连接，可想而知，传输文件是需要保证可靠性的。通过FTP客户端来操作在FTP服务器上的文件，不需要登录到服务器操作文件。因此可以在不同的操作系统中上传和下载文件。完成系统和系统之间的跨越传输。

![image-20230131170956445](E:\学习笔记\图片\image-20230131170956445.png)

服务器端验证完成后就可以开始交互。

上传和下载需要建立两个TCP链接。

-   连接一：客户端发送控制命令。比如查看文件、上传、下载。。。
-   连接二：服务器端主动发送请求和客户端建立连接，然后将文件发送给客户端

FTP它是有状态的协议，它会维护客户的信息。



### 2.2.5 P2P体系结构

P2P体系结构相对于C/S结构不用总是打开基础设施服务器。它的运作方式是对等方与对等方之间间接或直接建立连接来进行传输，这些对等方不是运行在不同厂商的服务器，而是受用户控制的桌面计算机和笔记本电脑。

例子：

-   文件分发（BitTprrent）
-   流媒体（kankan）
-   VOIP（skype）：语音通话技术，比如微信



**那么它相对于C/S服务器有哪些好处呢？**

C/S模式下。









### 2.2.6  视频流和CDN





## 2.3 使用Socket编程





# 三、运输层





# 四、网络层







# 五、链路层







# 六、物理层





# 七、网络安全









